for (i in seq_along(data)) {
if (i == 1) {
joinedData <- as.data.frame(data[1])
} else {
joinedData = rbind(joinedData, data[[i]])
}
}
length(data[1])
length(data[[1]])
summary(data)
summary(data[1])
summary(data[[1]])
summarise(data[1])
summarize(data[1])
source('~/Klipfolio/Coursera/rProgramming/pollutantmean.R')
?mean
mean(joinedData[[pollutant]],na.rm = T)
mean(joinedData[pollutant],na.rm = T)
pollutant = "sulfur"
mean(joinedData[pollutant],na.rm = T)
View(joinedData)
pollutant = "sulfate"
mean(joinedData[pollutant],na.rm = T)
mean(joinedData[[pollutant]],na.rm = T)
source('~/Klipfolio/Coursera/rProgramming/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
source('~/Klipfolio/Coursera/rProgramming/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
View(joinedData)
class(joinedData)
source('~/Klipfolio/Coursera/rProgramming/pollutantmean.R')
source('~/Klipfolio/Coursera/rProgramming/pollutantmean.R')
source('~/Klipfolio/Coursera/rProgramming/pollutantmean.R')
source('~/Klipfolio/Coursera/rProgramming/pollutantmean.R')
class(joinedData)
pollutantmean("specdata", "sulfate", 1:10)
summary(joinedData$sulfate)
mean(joinedData$sulfate)
mean(joinedData$sulfate, rm.na=T)
?mean
mean(as.vector(joinedData$sulfate), rm.na=T)
mean(as.vector(joinedData$sulfate))
mean(as.numeric(joinedData$sulfate))
head(joinedData$sulfate)
mean(joinedData$sulfate, rm.na = TRUE)
y <- !is.na(joinedData$sulfate)
mean(joinedData$sulfate[y,])
mean(joinedData$sulfate[,y])
mean(as.numeric(joinedData$sulfate)[y,])
rm()
rm(x,data,joinedData,directory,fileNames,filePaths,i,id,myDir,path,pollutant,y)
rm(file)
directory = "specdata"
pollutant = "sulfate"
id = 1:10
directory = paste("./", directory, sep = "")
fileNames = list.files(directory)
fileNames
filePaths = file.path(directory, fileNames[id])
filePaths
for (path in filePaths) {
c(data, read.csv(path))
}
myData = vector("list")
for (path in filePaths) {
c(myData, read.csv(path))
}
fileNames = list.files(directory)
filePaths = file.path(directory, fileNames[id])
myData = vector("list")
for (path in filePaths) {
c(myData, read.csv(path))
}
myData = vector("list")
for (path in filePaths) {
myData <- c(myData, read.csv(path))
}
for (i in seq_along(filePaths)) {
if (i == 1) {
myData = read.csv(filePaths[1])
} else {
myData = c(myData,read.csv(filePaths[i]))
}
}
for (i in seq_along(filePaths)) {
if (i == 1) {
myData = read.csv(filePaths[1])
} else {
myData = c(myData,read.csv(filePaths[i]))
}
}
myData = read.csv(filePaths[1])
i = 2
myData = c(myData,read.csv(filePaths[i]))
myData = read.csv(filePaths[1])
class(myData)
myData = rbind(myData,read.csv(filePaths[i]))
for (i in seq_along(filePaths)) {
if (i == 1) {
myData = read.csv(filePaths[1])
} else {
myData = rbind(myData,read.csv(filePaths[i]))
}
}
summary(myData$sulfate)
if (pollutant == "sulfate") {
mean(joinedData$sulfate,na.rm = T)
} else {
mean(joinedData[[pollutant]],na.rm = T)
}
#calculate mean
# mean(joinedData[[pollutant]],na.rm = T)
if (pollutant == "sulfate") {
mean(myData$sulfate,na.rm = T)
} else {
mean(myData[[pollutant]],na.rm = T)
}
source('~/Klipfolio/Coursera/rProgramming/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
length(complete.cases(myData[1]))
for (i in seq_along(filePaths)) {
if (i == 1) {
myData = read.csv(filePaths[1])
} else {
myData = c(myData,read.csv(filePaths[i]))
}
}
rm(directory, fileNames, filePaths, i, id, myData, myDir, path, pollutant)
source('~/Klipfolio/Coursera/rProgramming/complete.R')
complete("specdata", 1)
x = complete("specdata", 1)
x = complete("specdata", 30:25)
x = complete("specdata", 1:4)
source('~/Klipfolio/Coursera/rProgramming/complete.R')
x = complete("specdata", 1:4)
source('~/Klipfolio/Coursera/rProgramming/complete.R')
x = complete("specdata", 1:4)
source('~/Klipfolio/Coursera/rProgramming/complete.R')
x = complete("specdata", 1:4)
source('~/Klipfolio/Coursera/rProgramming/complete.R')
x = complete("specdata", 1:4)
?read.csv
test <- data.fame(id, nobs)
test <- data.fame(id=1, nobs=5)
test = data.fame(id=1, nobs=5)
test = data.frame(id, nobs)
test = data.frame()
source('~/Klipfolio/Coursera/rProgramming/complete.R')
source('~/Klipfolio/Coursera/rProgramming/complete.R')
complete("specdata", 1)
source('~/Klipfolio/Coursera/rProgramming/complete.R')
complete("specdata", 1)
source('~/Klipfolio/Coursera/rProgramming/complete.R')
complete("specdata", 1)
source('~/Klipfolio/Coursera/rProgramming/complete.R')
complete("specdata", 1)
rm(test, x)
source('~/Klipfolio/Coursera/rProgramming/complete.R')
directory = "specdata"
id = 1:332
directory <- paste("./", directory, sep = "")
path <- paste("./", directory, sep = "")
directory = "specdata"
path <- paste("./", directory, sep = "")
fileNames <- list.files(path)
filePaths <- file.path(path, fileNames[id])
for (i in seq_along(filePaths)) {
if (i == 1) {
myData <- read.csv(filePaths[1])
#Data frame that will be populated with complete cases
output <- data.frame(id = id[1], nobs = length(complete.cases(myData[1])))
} else {
myData <- c(myData,read.csv(filePaths[i]))
#print(str(myData))
}
}
source('~/Klipfolio/Coursera/rProgramming/complete.R')
complete(id = 1:3)
source('~/Klipfolio/Coursera/rProgramming/complete.R')
complete(id = 1:3)
rm(directory, output, filePaths, i, id, myData,path)
rm(fileNames)
source('~/Klipfolio/Coursera/rProgramming/complete.R')
directory = "specdata", id = 1:332
directory = "specdata"
id = 1:332
path <- paste("./", directory, sep = "")
#Read the data into a data frame
fileNames <- list.files(path)
filePaths <- file.path(path, fileNames[id])
for (i in seq_along(filePaths)) {
if (i == 1) {
myData <- read.csv(filePaths[1])
#How many of these are complete cases
numComplete <- length(which(complete.cases(myData[1]) == T))
#Data frame that will be populated with complete cases
output <- data.frame(id = id[1], nobs = numComplete)
} else {
myData <- c(myData,read.csv(filePaths[i]))
#print(str(myData))
}
}
which(complete.cases(myData[1]) == T)
complete.cases(myData[1])
myData[1]
numComplete <- length(which(complete.cases(myData) == T))
numComplete <- length(which(complete.cases(myData)))
complete.cases(myData)
complete.cases(myData)
myData <- read.csv(filePaths[1])
class(myData)
numComplete <- length(which(complete.cases(myData)))
output <- data.frame(id = id[1], nobs = numComplete)
output
source('~/Klipfolio/Coursera/rProgramming/complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
corr(myData$sulfate, myData$nitrate)
cor(myData$sulfate, myData$nitrate)
cor(myData$sulfate, myData$nitrate, rm.na = T)
cor(myData$sulfate, myData$nitrate, na.rm = T)
cor(myData, sulfate, nitrate)
cor(sulfate, nitrate)
?cor
cor(myData$sulfate, myData$nitrate, use = "complete")
?which
source('~/Klipfolio/Coursera/rProgramming/complete.R')
complete("specdata", 30:25)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
threshold = 0
rm(myData, output, directory, fileNames, filePaths, i, id, myDir, numComplete, path)
rm(submit)
rm(complete)
rm(pollutatmean)
rm(pollutantmean)
install.packages("dplyr")
library(dplyr)
complete <- complete(directory)
directory = "specdata"
complete <- complete(directory)
complete <- complete(directory = directory)
source("complete.R")
complete <- complete(directory)
View(complete)
treshold <- select(complete, nobs > treashold)
treshold <- select(complete, nobs > treshold)
threshold = 0
complete <- complete(directory)
complete <- complete.cases(directory)
source("complete.R")
complete <- complete(directory)
threshold <- select(complete, nobs > threshold)
threshold <- select(complete, nobs > threshold)
threshold <- complete[complete$obs > threshold]
threshold <- complete[complete$nobs > threshold]
threshold <- complete[complete$nobs > threshold]
threshold <- filter(complete, complete$nobs > treshold)
threshold = 0
selected <- filter(complete, complete$nobs > treshold)
treshold
selected <- filter(complete, complete$nobs > threshold)
threshold = 150
selected <- filter(complete, complete$nobs > threshold)
View(complete)
View(selected)
View(complete)
threshold = 500
selected <- filter(complete, complete$nobs > threshold)
threshold = 0
selected <- filter(complete, complete$nobs > threshold)
threshold = 5000
selected <- filter(complete, complete$nobs > threshold)
str(complete)
debugSource('~/Klipfolio/Coursera/rProgramming/corr.R')
rm(complete, selected)
install.packages("dplyr")
library(dplyr)
source("complete.R")
#get number of compete cases for all files
complete <- complete(directory)
install.packages("dplyr")
source("complete.R")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
#get number of compete cases for all files
complete <- complete(directory)
#find the IDs of meters that meet the threshold
idexes <- filter(complete, complete$nobs > threshold)
threshold <- 400
#find the IDs of meters that meet the threshold
idexes <- filter(complete, complete$nobs > threshold)
#filter out observations based on IDs from previous step
fileNames <- list.files(directory)
filePaths <- file.path(directory, fileNames[indexes$id])
#find the IDs of meters that meet the threshold
indexes <- filter(complete, complete$nobs > threshold)
rm(idexes)
#filter out observations based on IDs from previous step
fileNames <- list.files(directory)
filePaths <- file.path(directory, fileNames[indexes$id])
for (i in seq_along(filePaths)) {
if (i == 1) {
myData <- read.csv(filePaths[1])
} else {
myData <- rbind(myData,read.csv(filePaths[i]))
}
}
#calculate correlations for meters above treashold
for (i in seq_along(myData)) {
if (i == 1) {
correlations <- cor(myData$sulfate[1], myData$nitrate[1])
} else {
correlations <- c(correlations, cor(myData$sulfate[i], myData$nitrate[i]))
}
}
for (i in seq_along(filePaths)) {
if (i == 1) {
myData <- read.csv(filePaths[1])
} else {
myData <- c(myData,read.csv(filePaths[i]))
}
}
dim(myData)
class(myData)
str(myData)
for (i in seq_along(filePaths)) {
myData[i] <- read.csv(filePaths[i])
}
for (i in filePaths) {
myData[i] <- read.csv(i)
}
warnings()
myData <- list(length(filePaths))
myData <- vector("list", length = length(filePaths))
for (i in filePaths) {
myData[i] <- read.csv(i)
}
for (i in filePaths) {
print(i)
#myData[i] <- read.csv(i)
}
#create full path assuming the folder is in the current working directory
#(sample input showed just a folder name being passed)
directory <- paste("./", directory, sep = "")
#filter out observations based on IDs from previous step
fileNames <- list.files(directory)
filePaths <- file.path(directory, fileNames[indexes$id])
myData <- vector("list", length = length(filePaths))
for (i in filePaths) {
print(i)
#myData[i] <- read.csv(i)
}
for (i in filePaths) {
#print(i)
myData[i] <- read.csv(i)
}
warnings()
for (i in filePaths) {
#print(i)
#myData[i] <- read.csv(i)
myData <- c(myData, read.csv(i))
}
for (i in filePaths) {
#print(i)
#myData[i] <- read.csv(i)
summary(read.csv(i))
myData <- c(myData, read.csv(i))
}
read.csv(filePaths[1])
threshold = 600
indexes <- filter(complete, complete$nobs > threshold)
directory <- paste("./", directory, sep = "")
fileNames <- list.files(directory)
filePaths <- file.path(directory, fileNames[indexes$id])
filePaths
myData <- vector("list", length = length(filePaths))
myData <- read.csv(filePaths[1])
View(myData)
myData <- c(myData, read.csv(filePaths[2]))
myData <- read.csv(filePaths[1])
class(myData)
directory = "specdata"
#get number of compete cases for all files
complete <- complete(directory)
#find the IDs of meters that meet the threshold
indexes <- filter(complete, complete$nobs > threshold)
#create full path assuming the folder is in the current working directory
#(sample input showed just a folder name being passed)
directory <- paste("./", directory, sep = "")
#load .csv files for locations above threshold based on coputed IDs from indexes
fileNames <- list.files(directory)
filePaths <- file.path(directory, fileNames[indexes$id])
for (i in filePaths) {
#print(i)
#myData[i] <- read.csv(i)
summary(read.csv(i))
myData <- c(myData, read.csv(i))
}
for (i in filePaths) {
file <- read.csv(i)
correlation <- cor(file$sulfate, file$nitrate)
corList <- c(corList, correlation)
}
corList <- vector("list")
for (i in filePaths) {
file <- read.csv(i)
correlation <- cor(file$sulfate, file$nitrate)
corList <- c(corList, correlation)
}
cor(sulfate, nitrate)
for (i in filePaths) {
file <- read.csv(i)
correlation <- cor(file$sulfate, file$nitrate)
print(correlation)
corList <- c(corList, correlation)
}
for (i in filePaths) {
file <- read.csv(i)
correlation <- cor(file$sulfate, file$nitrate, rm.na = T)
print(correlation)
corList <- c(corList, correlation)
}
?cor
for (i in filePaths) {
file <- read.csv(i)
correlation <- cor(file$sulfate, file$nitrate, na.rm = T)
print(correlation)
corList <- c(corList, correlation)
}
cor(1:10, 4:30)
cor(1:10, 10:20)
cor(1:10, 1:10)
cor(1:10, 5:15)
cor(1:10)
str(myData)
myData[1]
myData[,1]
myData[[1]
]
x <- myData$sulfate
y <- myData$nitrate
cor(x,y)
cor(x,y, na.rm = T)
?cor
cor(1:10,2:11)
corList <- vector("list")
for (i in filePaths) {
file <- read.csv(i)
correlation <- cor(file$sulfate, file$nitrate, use = complete)
print(correlation)
corList <- c(corList, correlation)
}
corList <- vector("list")
for (i in filePaths) {
file <- read.csv(i)
correlation <- cov(file$sulfate, file$nitrate, use = complete)
print(correlation)
corList <- c(corList, correlation)
}
cor(x,y)
cor(x,y, use = complete)
cor(x,y, use = "complete"")
cor(x,y, use = "complete")
corList <- vector("list")
for (i in filePaths) {
file <- read.csv(i)
correlation <- cor(file$sulfate, file$nitrate, use = "complete")
print(correlation)
corList <- c(corList, correlation)
}
source('~/Klipfolio/Coursera/rProgramming/corr.R')
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
install.packages("dplyr")
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source('~/Klipfolio/Coursera/rProgramming/corr.R')
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
source('~/Klipfolio/Coursera/rProgramming/corr.R')
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source('~/Klipfolio/Coursera/rProgramming/corr.R')
submit()
submit()
install.packages("dplyr")
